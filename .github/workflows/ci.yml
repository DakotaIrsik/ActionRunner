name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Pester tests
        shell: powershell
        run: |
          Write-Host "Installing Pester 5.x..."
          # Remove old Pester version if present
          $oldPester = Get-Module -ListAvailable -Name Pester | Where-Object { $_.Version -lt '5.0' }
          if ($oldPester) {
            Write-Host "Removing old Pester version(s)..."
          }

          # Install Pester 5.x
          Install-Module -Name Pester -MinimumVersion 5.0 -Force -SkipPublisherCheck -Scope CurrentUser
          Import-Module Pester -MinimumVersion 5.0 -Force

          Write-Host "Running test suite..."
          $config = New-PesterConfiguration
          $config.Run.Path = '.\tests\'
          $config.Run.PassThru = $true
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputFormat = 'NUnitXml'
          $config.TestResult.OutputPath = 'test-results.xml'

          $testResults = Invoke-Pester -Configuration $config

          if ($testResults.FailedCount -gt 0) {
            Write-Error "Tests failed: $($testResults.FailedCount) failures"
            exit 1
          }

          Write-Host "All tests passed! [OK]" -ForegroundColor Green

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml

  validate-scripts:
    name: Validate PowerShell Scripts
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run PSScriptAnalyzer
        shell: powershell
        run: |
          Write-Host "Installing PSScriptAnalyzer if not present..."
          if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {
            # Install NuGet provider first to avoid prompts
            Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Scope CurrentUser -ErrorAction SilentlyContinue | Out-Null
            Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck -Scope CurrentUser
          }

          Write-Host "Analyzing PowerShell scripts..."
          $scripts = Get-ChildItem -Path .\scripts\, .\config\ -Filter *.ps1 -Recurse
          $errors = @()
          $warnings = @()

          foreach ($script in $scripts) {
            Write-Host "Analyzing: $($script.Name)"
            $results = Invoke-ScriptAnalyzer -Path $script.FullName -Severity Error, Warning
            if ($results) {
              $scriptErrors = $results | Where-Object { $_.Severity -eq 'Error' }
              $scriptWarnings = $results | Where-Object { $_.Severity -eq 'Warning' }

              if ($scriptErrors) {
                $errors += $scriptErrors
                $scriptErrors | Format-Table -AutoSize
              }

              if ($scriptWarnings) {
                $warnings += $scriptWarnings
              }
            }
          }

          if ($warnings.Count -gt 0) {
            Write-Warning "Found $($warnings.Count) warnings (non-blocking)"
          }

          if ($errors.Count -gt 0) {
            Write-Error "Found $($errors.Count) errors in PowerShell scripts"
            exit 1
          }

          Write-Host "All scripts validated successfully! [OK]" -ForegroundColor Green

  security-check:
    name: Security Validation
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for sensitive data
        shell: powershell
        run: |
          Write-Host "Scanning for sensitive data patterns..."
          $patterns = @(
            'password\s*=',
            'api[_-]?key\s*=',
            'secret\s*=',
            'token\s*=',
            'BEGIN RSA PRIVATE KEY',
            'BEGIN PRIVATE KEY'
          )

          $found = @()
          $files = Get-ChildItem -Path . -Recurse -File -Exclude @('*.log', '*.xml', '.git')

          foreach ($file in $files) {
            $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
            if ($content) {
              foreach ($pattern in $patterns) {
                if ($content -imatch $pattern) {
                  $found += "$($file.FullName): matched pattern '$pattern'"
                }
              }
            }
          }

          if ($found.Count -gt 0) {
            Write-Warning "Potential sensitive data found:"
            $found | ForEach-Object { Write-Warning $_ }
            Write-Warning "Review these findings before committing"
          } else {
            Write-Host "No sensitive data patterns detected [OK]" -ForegroundColor Green
          }

      - name: Validate firewall rules
        shell: powershell
        run: |
          if (Test-Path .\config\firewall-rules.yaml) {
            Write-Host "Firewall rules configuration found [OK]" -ForegroundColor Green
          } else {
            Write-Warning "No firewall rules configuration found"
          }

  build-status:
    name: Report Build Status
    runs-on: [self-hosted, windows]
    needs: [test, validate-scripts, security-check]
    if: always()

    steps:
      - name: Report status
        shell: powershell
        run: |
          Write-Host "=== Build Status ===" -ForegroundColor Cyan
          Write-Host "Tests: ${{ needs.test.result }}"
          Write-Host "Script Validation: ${{ needs.validate-scripts.result }}"
          Write-Host "Security Check: ${{ needs.security-check.result }}"

          if ("${{ needs.test.result }}" -eq "success" -and
              "${{ needs.validate-scripts.result }}" -eq "success" -and
              "${{ needs.security-check.result }}" -eq "success") {
            Write-Host "[OK] All checks passed!" -ForegroundColor Green
          } else {
            Write-Host "[X] Some checks failed" -ForegroundColor Red
            exit 1
          }
