name: Runner Test

on:
  workflow_dispatch: # Manual trigger only

permissions:
  contents: read

jobs:
  runner-health-check:
    name: Self-Hosted Runner Health Check
    runs-on: [self-hosted, windows]

    steps:
      - name: System Information
        run: |
          Write-Host "=== Runner System Information ==="
          Write-Host ""
          Write-Host "Hostname: $env:COMPUTERNAME"
          Write-Host "OS: $((Get-CimInstance Win32_OperatingSystem).Caption)"
          Write-Host "PowerShell: $($PSVersionTable.PSVersion)"
          Write-Host ""

          Write-Host "=== Disk Space ==="
          Get-PSDrive -PSProvider FileSystem | Where-Object { $_.Used -gt 0 } | Format-Table Name, @{Label="Used(GB)";Expression={[math]::Round($_.Used/1GB,2)}}, @{Label="Free(GB)";Expression={[math]::Round($_.Free/1GB,2)}}, @{Label="Total(GB)";Expression={[math]::Round(($_.Used+$_.Free)/1GB,2)}}
          Write-Host ""

          Write-Host "=== Memory ==="
          $os = Get-CimInstance Win32_OperatingSystem
          $totalMemGB = [math]::Round($os.TotalVisibleMemorySize/1MB, 2)
          $freeMemGB = [math]::Round($os.FreePhysicalMemory/1MB, 2)
          $usedMemGB = [math]::Round($totalMemGB - $freeMemGB, 2)
          Write-Host "Total: $totalMemGB GB"
          Write-Host "Used: $usedMemGB GB"
          Write-Host "Free: $freeMemGB GB"
          Write-Host ""

          Write-Host "=== CPU ==="
          $cpu = Get-CimInstance Win32_Processor
          Write-Host "Name: $($cpu.Name)"
          Write-Host "Cores: $($cpu.NumberOfCores)"
          Write-Host "Logical Processors: $($cpu.NumberOfLogicalProcessors)"
        shell: pwsh

      - name: Checkout Test
        uses: actions/checkout@v4

      - name: Verify Repository Files
        run: |
          Write-Host "=== Repository Files Check ==="
          Write-Host ""

          $expectedFiles = @(
            "README.md",
            "docs/security.md",
            "config/firewall-rules.yaml"
          )

          foreach ($file in $expectedFiles) {
            if (Test-Path $file) {
              Write-Host "✓ $file"
            } else {
              Write-Warning "⚠ Missing: $file"
            }
          }
        shell: pwsh

      - name: PowerShell Test
        run: |
          Write-Host "=== PowerShell Capabilities Test ==="
          Write-Host ""

          # Test basic PowerShell features
          Write-Host "✓ PowerShell execution working"

          # Test network connectivity to GitHub
          try {
            $response = Invoke-WebRequest -Uri "https://api.github.com/zen" -UseBasicParsing -TimeoutSec 10
            Write-Host "✓ GitHub API connectivity: $($response.StatusCode)"
            Write-Host "  Message: $($response.Content)"
          } catch {
            Write-Warning "⚠ GitHub API connectivity issue: $_"
          }

          Write-Host ""
          Write-Host "=== Test Complete ==="
        shell: pwsh

      - name: Environment Variables Check
        run: |
          Write-Host "=== GitHub Actions Environment ==="
          Write-Host ""
          Write-Host "Runner OS: $env:RUNNER_OS"
          Write-Host "Runner Arch: $env:RUNNER_ARCH"
          Write-Host "Runner Name: $env:RUNNER_NAME"
          Write-Host "Workflow: $env:GITHUB_WORKFLOW"
          Write-Host "Repository: $env:GITHUB_REPOSITORY"
          Write-Host "Branch: $env:GITHUB_REF_NAME"
          Write-Host ""
        shell: pwsh

      - name: Security Check
        run: |
          Write-Host "=== Security Configuration Check ==="
          Write-Host ""

          # Check if running as administrator (should NOT be)
          $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

          if ($isAdmin) {
            Write-Warning "⚠ WARNING: Runner is running with administrator privileges!"
            Write-Warning "   This is a security risk. Runner should use a limited service account."
          } else {
            Write-Host "✓ Runner is NOT running as administrator (good)"
          }

          Write-Host ""
          Write-Host "Current user: $env:USERNAME"
          Write-Host ""
        shell: pwsh
